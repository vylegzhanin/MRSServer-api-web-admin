/*
 * MRSServer
 * Integration technology for deploying R analytics inside web, desktop, mobile, and dashboard applications as well as backend systems. Turn your R scripts into analytics web services, so code can be easily executed by applications running on a secure server.  The core APIs can be grouped into several categories, including: [Authentication](#authentication-apis), [Web Services](#services-management-apis), [Sessions](#session-apis), [Snapshots](#snapshot-apis), and [Status](#status-apis). 
 *
 * OpenAPI spec version: 9.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponseDefault;
import io.swagger.client.model.PatchRequest;
import io.swagger.client.model.PublishRequest;
import io.swagger.client.model.PublishRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesManagementAPIsApi {
    private ApiClient apiClient;

    public ServicesManagementAPIsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesManagementAPIsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteWebServiceVersion */
    private com.squareup.okhttp.Call deleteWebServiceVersionCall(String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebServiceVersionValidateBeforeCall(String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteWebServiceVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWebServiceVersionCall(name, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Service
     * Deletes the published web service for the logged in user.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebServiceVersion(String name, String version) throws ApiException {
        deleteWebServiceVersionWithHttpInfo(name, version);
    }

    /**
     * Delete Service
     * Deletes the published web service for the logged in user.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebServiceVersionWithHttpInfo(String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebServiceVersionValidateBeforeCall(name, version, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Service (asynchronously)
     * Deletes the published web service for the logged in user.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebServiceVersionAsync(String name, String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebServiceVersionValidateBeforeCall(name, version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllWebServiceVersionsByName */
    private com.squareup.okhttp.Call getAllWebServiceVersionsByNameCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/services/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllWebServiceVersionsByNameValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getAllWebServiceVersionsByName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllWebServiceVersionsByNameCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service by &#x60;name&#x60;
     * Lists all the published services with the provided &#x60;name&#x60;.
     * @param name name of the published web service. (required)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> getAllWebServiceVersionsByName(String name) throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = getAllWebServiceVersionsByNameWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Get Service by &#x60;name&#x60;
     * Lists all the published services with the provided &#x60;name&#x60;.
     * @param name name of the published web service. (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> getAllWebServiceVersionsByNameWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = getAllWebServiceVersionsByNameValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service by &#x60;name&#x60; (asynchronously)
     * Lists all the published services with the provided &#x60;name&#x60;.
     * @param name name of the published web service. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllWebServiceVersionsByNameAsync(String name, final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllWebServiceVersionsByNameValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllWebServices */
    private com.squareup.okhttp.Call getAllWebServicesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/services".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllWebServicesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllWebServicesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Services
     * Lists all the published services.
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> getAllWebServices() throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = getAllWebServicesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Services
     * Lists all the published services.
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> getAllWebServicesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllWebServicesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Services (asynchronously)
     * Lists all the published services.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllWebServicesAsync(final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllWebServicesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWebServiceVersion */
    private com.squareup.okhttp.Call getWebServiceVersionCall(String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebServiceVersionValidateBeforeCall(String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getWebServiceVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWebServiceVersionCall(name, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Service by &#x60;name&#x60; and &#x60;version&#x60;
     * Lists all the published services with the provided &#x60;name&#x60; and &#x60;version&#x60;.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> getWebServiceVersion(String name, String version) throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = getWebServiceVersionWithHttpInfo(name, version);
        return resp.getData();
    }

    /**
     * Get Service by &#x60;name&#x60; and &#x60;version&#x60;
     * Lists all the published services with the provided &#x60;name&#x60; and &#x60;version&#x60;.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> getWebServiceVersionWithHttpInfo(String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getWebServiceVersionValidateBeforeCall(name, version, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Service by &#x60;name&#x60; and &#x60;version&#x60; (asynchronously)
     * Lists all the published services with the provided &#x60;name&#x60; and &#x60;version&#x60;.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebServiceVersionAsync(String name, String version, final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebServiceVersionValidateBeforeCall(name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patchRealtimeWebServiceByNameVersion */
    private com.squareup.okhttp.Call patchRealtimeWebServiceByNameVersionCall(String name, String version, String description, String operationId, File model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/realtime-services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (description != null)
        localVarFormParams.put("description", description);
        if (operationId != null)
        localVarFormParams.put("operationId", operationId);
        if (model != null)
        localVarFormParams.put("model", model);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchRealtimeWebServiceByNameVersionValidateBeforeCall(String name, String version, String description, String operationId, File model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchRealtimeWebServiceByNameVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling patchRealtimeWebServiceByNameVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = patchRealtimeWebServiceByNameVersionCall(name, version, description, operationId, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch realtime web service
     * Updates the published realtime web service.
     * @param name Name of the published realtime web service (required)
     * @param version Version of the published realtime web service (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @param model The binary serialized model to be used for realtime web service. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String patchRealtimeWebServiceByNameVersion(String name, String version, String description, String operationId, File model) throws ApiException {
        ApiResponse<String> resp = patchRealtimeWebServiceByNameVersionWithHttpInfo(name, version, description, operationId, model);
        return resp.getData();
    }

    /**
     * Patch realtime web service
     * Updates the published realtime web service.
     * @param name Name of the published realtime web service (required)
     * @param version Version of the published realtime web service (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @param model The binary serialized model to be used for realtime web service. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> patchRealtimeWebServiceByNameVersionWithHttpInfo(String name, String version, String description, String operationId, File model) throws ApiException {
        com.squareup.okhttp.Call call = patchRealtimeWebServiceByNameVersionValidateBeforeCall(name, version, description, operationId, model, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch realtime web service (asynchronously)
     * Updates the published realtime web service.
     * @param name Name of the published realtime web service (required)
     * @param version Version of the published realtime web service (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @param model The binary serialized model to be used for realtime web service. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchRealtimeWebServiceByNameVersionAsync(String name, String version, String description, String operationId, File model, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchRealtimeWebServiceByNameVersionValidateBeforeCall(name, version, description, operationId, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patchWebServiceVersion */
    private com.squareup.okhttp.Call patchWebServiceVersionCall(String name, String version, PatchRequest patchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patchRequest;
        
        // create path and map variables
        String localVarPath = "/services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchWebServiceVersionValidateBeforeCall(String name, String version, PatchRequest patchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling patchWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'patchRequest' is set
        if (patchRequest == null) {
            throw new ApiException("Missing the required parameter 'patchRequest' when calling patchWebServiceVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = patchWebServiceVersionCall(name, version, patchRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch Service
     * Updates the published service.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @param patchRequest Publish Web Service request details. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String patchWebServiceVersion(String name, String version, PatchRequest patchRequest) throws ApiException {
        ApiResponse<String> resp = patchWebServiceVersionWithHttpInfo(name, version, patchRequest);
        return resp.getData();
    }

    /**
     * Patch Service
     * Updates the published service.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @param patchRequest Publish Web Service request details. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> patchWebServiceVersionWithHttpInfo(String name, String version, PatchRequest patchRequest) throws ApiException {
        com.squareup.okhttp.Call call = patchWebServiceVersionValidateBeforeCall(name, version, patchRequest, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch Service (asynchronously)
     * Updates the published service.
     * @param name The name of the published web service. (required)
     * @param version The version of the published web service. (required)
     * @param patchRequest Publish Web Service request details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchWebServiceVersionAsync(String name, String version, PatchRequest patchRequest, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchWebServiceVersionValidateBeforeCall(name, version, patchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for publishRealtimeWebServiceByName */
    private com.squareup.okhttp.Call publishRealtimeWebServiceByNameCall(String name, File model, String description, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/realtime-services/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (description != null)
        localVarFormParams.put("description", description);
        if (operationId != null)
        localVarFormParams.put("operationId", operationId);
        if (model != null)
        localVarFormParams.put("model", model);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishRealtimeWebServiceByNameValidateBeforeCall(String name, File model, String description, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publishRealtimeWebServiceByName(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling publishRealtimeWebServiceByName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameCall(name, model, description, operationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create realtime web service by &#x60;name&#x60;
     * Publish the realtime web services for the logged in user with given name and a unique version.
     * @param name name of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishRealtimeWebServiceByName(String name, File model, String description, String operationId) throws ApiException {
        ApiResponse<String> resp = publishRealtimeWebServiceByNameWithHttpInfo(name, model, description, operationId);
        return resp.getData();
    }

    /**
     * Create realtime web service by &#x60;name&#x60;
     * Publish the realtime web services for the logged in user with given name and a unique version.
     * @param name name of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishRealtimeWebServiceByNameWithHttpInfo(String name, File model, String description, String operationId) throws ApiException {
        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameValidateBeforeCall(name, model, description, operationId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create realtime web service by &#x60;name&#x60; (asynchronously)
     * Publish the realtime web services for the logged in user with given name and a unique version.
     * @param name name of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishRealtimeWebServiceByNameAsync(String name, File model, String description, String operationId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameValidateBeforeCall(name, model, description, operationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for publishRealtimeWebServiceByNameVersion */
    private com.squareup.okhttp.Call publishRealtimeWebServiceByNameVersionCall(String name, String version, File model, String description, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/realtime-services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (description != null)
        localVarFormParams.put("description", description);
        if (operationId != null)
        localVarFormParams.put("operationId", operationId);
        if (model != null)
        localVarFormParams.put("model", model);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishRealtimeWebServiceByNameVersionValidateBeforeCall(String name, String version, File model, String description, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publishRealtimeWebServiceByNameVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling publishRealtimeWebServiceByNameVersion(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling publishRealtimeWebServiceByNameVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameVersionCall(name, version, model, description, operationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create realtime web service by &#x60;name&#x60; and &#x60;version&#x60;.
     * Publish the realtime web services for the logged in user with given name and given version.
     * @param name The name of the realtime web service to be published. (required)
     * @param version The version of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishRealtimeWebServiceByNameVersion(String name, String version, File model, String description, String operationId) throws ApiException {
        ApiResponse<String> resp = publishRealtimeWebServiceByNameVersionWithHttpInfo(name, version, model, description, operationId);
        return resp.getData();
    }

    /**
     * Create realtime web service by &#x60;name&#x60; and &#x60;version&#x60;.
     * Publish the realtime web services for the logged in user with given name and given version.
     * @param name The name of the realtime web service to be published. (required)
     * @param version The version of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishRealtimeWebServiceByNameVersionWithHttpInfo(String name, String version, File model, String description, String operationId) throws ApiException {
        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameVersionValidateBeforeCall(name, version, model, description, operationId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create realtime web service by &#x60;name&#x60; and &#x60;version&#x60;. (asynchronously)
     * Publish the realtime web services for the logged in user with given name and given version.
     * @param name The name of the realtime web service to be published. (required)
     * @param version The version of the realtime web service to be published. (required)
     * @param model The binary serialized model to be used for realtime web service. (required)
     * @param description The description of the realtime web service to be published. (optional)
     * @param operationId Swagger operationId/alias for the realtime web service to be published. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishRealtimeWebServiceByNameVersionAsync(String name, String version, File model, String description, String operationId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishRealtimeWebServiceByNameVersionValidateBeforeCall(name, version, model, description, operationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for publishWebService */
    private com.squareup.okhttp.Call publishWebServiceCall(String name, PublishRequest publishRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = publishRequest;
        
        // create path and map variables
        String localVarPath = "/services/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishWebServiceValidateBeforeCall(String name, PublishRequest publishRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publishWebService(Async)");
        }
        
        // verify the required parameter 'publishRequest' is set
        if (publishRequest == null) {
            throw new ApiException("Missing the required parameter 'publishRequest' when calling publishWebService(Async)");
        }
        
        
        com.squareup.okhttp.Call call = publishWebServiceCall(name, publishRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Service by &#x60;name&#x60;
     * Publish the web services for the logged in user with given name and a unique version.
     * @param name name of the published web service. (required)
     * @param publishRequest Publish Web Service request details. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishWebService(String name, PublishRequest publishRequest) throws ApiException {
        ApiResponse<String> resp = publishWebServiceWithHttpInfo(name, publishRequest);
        return resp.getData();
    }

    /**
     * Create Service by &#x60;name&#x60;
     * Publish the web services for the logged in user with given name and a unique version.
     * @param name name of the published web service. (required)
     * @param publishRequest Publish Web Service request details. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishWebServiceWithHttpInfo(String name, PublishRequest publishRequest) throws ApiException {
        com.squareup.okhttp.Call call = publishWebServiceValidateBeforeCall(name, publishRequest, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Service by &#x60;name&#x60; (asynchronously)
     * Publish the web services for the logged in user with given name and a unique version.
     * @param name name of the published web service. (required)
     * @param publishRequest Publish Web Service request details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishWebServiceAsync(String name, PublishRequest publishRequest, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishWebServiceValidateBeforeCall(name, publishRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for publishWebServiceVersion */
    private com.squareup.okhttp.Call publishWebServiceVersionCall(String name, String version, PublishRequest1 publishRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = publishRequest;
        
        // create path and map variables
        String localVarPath = "/services/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishWebServiceVersionValidateBeforeCall(String name, String version, PublishRequest1 publishRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publishWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling publishWebServiceVersion(Async)");
        }
        
        // verify the required parameter 'publishRequest' is set
        if (publishRequest == null) {
            throw new ApiException("Missing the required parameter 'publishRequest' when calling publishWebServiceVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = publishWebServiceVersionCall(name, version, publishRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Service by &#x60;name&#x60; and &#x60;version&#x60;
     * Publish the web service for the logged in user with given name and version.
     * @param name name of the published web service. (required)
     * @param version version of the published web service. (required)
     * @param publishRequest Publish Service request details. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishWebServiceVersion(String name, String version, PublishRequest1 publishRequest) throws ApiException {
        ApiResponse<String> resp = publishWebServiceVersionWithHttpInfo(name, version, publishRequest);
        return resp.getData();
    }

    /**
     * Create Service by &#x60;name&#x60; and &#x60;version&#x60;
     * Publish the web service for the logged in user with given name and version.
     * @param name name of the published web service. (required)
     * @param version version of the published web service. (required)
     * @param publishRequest Publish Service request details. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishWebServiceVersionWithHttpInfo(String name, String version, PublishRequest1 publishRequest) throws ApiException {
        com.squareup.okhttp.Call call = publishWebServiceVersionValidateBeforeCall(name, version, publishRequest, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Service by &#x60;name&#x60; and &#x60;version&#x60; (asynchronously)
     * Publish the web service for the logged in user with given name and version.
     * @param name name of the published web service. (required)
     * @param version version of the published web service. (required)
     * @param publishRequest Publish Service request details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishWebServiceVersionAsync(String name, String version, PublishRequest1 publishRequest, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishWebServiceVersionValidateBeforeCall(name, version, publishRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
